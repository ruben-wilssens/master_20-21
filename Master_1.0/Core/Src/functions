void transmitAudioPacket(void){
	uint8_t packet_total_length = settings_audiosamples_length + 5; // Packet length (1byte), Packet type (1byte), ID (1byte), Data length (1byte), RSSI byte (1byte)

	uint8_t header[] = {0x10, packet_total_length, settings_ID, packet_type_audio, settings_audiosamples_length};

	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit_IT(&hspi1, header, 4);

	// If we want to send encrypted data -> encrypt audio samples with key and write samples to transceiver
	if (settings_encryption){
		/*
		// Needs adjustments for AES block encryption
		for (int i=0; i<settings_audiosamples_length; i++){
			uint8_t encryptedSample[1];
			returnValue = circular_buf_get(Tx_buffer_handle_t, &encryptedSample);

			encryptedSample[0] = encryptedSample[0] ^ Key_Current;

			HAL_SPI_Transmit_IT(&hspi1, encryptedSample, 1);

		}
		*/
	}
	else{
		// Write audio samples to transceiver
		uint8_t sample[1];
		uint8_t cbuf_return;
		for (int i=0; i<settings_audiosamples_length; i++){
			cbuf_return = circular_buf_get(audio_buffer_handle_t, (uint16_t *) sample);
			HAL_SPI_Transmit_IT(&hspi1, sample, 1);
		}
	}

	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_SET);

	ADF_set_Tx_mode();
}


void readPacket(void){
	// SPI_PKT_RD and SPI_NOP command
	uint8_t SPI_commands[] = {0x30, 0xff};

	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_RESET);

	HAL_SPI_Transmit_IT(&hspi1, SPI_commands, 2);

	HAL_SPI_Receive_IT(&hspi1, &Rx_packet_length, 1);
	HAL_SPI_Receive_IT(&hspi1, &Rx_packet_type, 1);
	HAL_SPI_Receive_IT(&hspi1, &Rx_from_ID, 1);
	HAL_SPI_Receive_IT(&hspi1, &Rx_data_length, 1);

	uint8_t Rx_data[Rx_data_length];
	HAL_SPI_Receive_IT(&hspi1, Rx_data, Rx_data_length);
	HAL_SPI_Receive_IT(&hspi1, &Rx_RSSI, 1);

	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_SET);

	while (ADF_SPI_READY() == 0);

	// if audio packet -> write samples to buffer
	if (Rx_packet_type == packet_type_audio){
		for (int i=0; i<Rx_data_length; i++){
			circular_buf_put_overwrite(audio_buffer_handle_t, Rx_data[i]);
		}
	}
}


void writeKeyPacket(void){
	while (ADF_SPI_READY() == 0);

	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_RESET);
	uint8_t bytes[] = {0x10, 0x05, 0x10, 0x00};								// SPI_PKT_WR command, packetlength=5, TYPE = 0x10 => Key packet
	HAL_SPI_Transmit_IT(&hspi1, bytes, 4);
	HAL_GPIO_WritePin(ADF7242_CS_GPIO_Port, ADF7242_CS_Pin, GPIO_PIN_SET);

	while (ADF_SPI_READY() == 0);
}


/*
void encryptAES128_test(){
	//uint32_t* encryptAES128_test(uint32_t array[4], uint32_t key[4])


	 // Key= {0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c}
	 // Plaintext 6bc1bee22e409f96e93d7e117393172a
	 // Input Block 6bc1bee22e409f96e93d7e117393172a
	 // Output Block 3ad77bb40d7a3660a89ecaf32466ef97
	 // Ciphertext 3ad77bb40d7a3660a89ecaf32466ef97




	//uint32_t key[4] = {0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c}; //see hcryp handle pKey
	2b7e151628aed2a6abf7158809cf4f3c

	HAL_SYSTICK_Config(0xFFFFFFFF); // Starting point for SysTick
	TIME_MEASURE_START;
	HAL_CRYP_Encrypt(&hcryp, input_data, 4, encrypted_data, 1000);
	TIME_MEASURE_STOP;

	TIME_MEASURE_START;
	HAL_CRYP_Decrypt(&hcryp, encrypted_data, 4, decrypted_data, 1000);
	TIME_MEASURE_STOP;
}
*/